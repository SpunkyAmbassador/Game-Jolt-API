import { RPM } from "../path.js"

const pluginName = "Game Jolt API";

// Start code here
const fs = require('fs');
const crypto = require('crypto');

const baseURL = "https://api.gamejolt.com/api/game/v1_2";
const gameID = RPM.Manager.Plugins.getParameter(pluginName, "Game ID")
const privateAPIkey = RPM.Manager.Plugins.getParameter(pluginName, "API Key");

// Getting username and userID from .gj-credentials file autogenerated by Game Jolt in game root directory
let username;
let userID;

const cwd = process.cwd();
const credentialsFiles = fs.readdirSync(cwd).filter(file => file.endsWith('.gj-credentials'));

credentialsFiles.forEach(file => {
    const content = fs.readFileSync(file, 'utf-8', (err) => {
        if (err) {
            console.error(`Error reading file ${file}:`, err);
            return;
        }

    });
    // Split the file content by new lines
    const lines = content.split('\n');

    // Get username and userID
    username = lines[1].trim();
    userID = lines[2].trim();
});

// This function is used to create signature for the API which validates the request.
function getMD5Hash(text) {
    const hash = crypto.createHash('md5').update(text).digest('hex');
    return hash;
}

////////////////////////////////////////////////// Trophies //////////////////////////////////////////////////

// Fetch - Fetches trophies with various attributes.
RPM.Manager.Plugins.registerCommand(pluginName, "Trophies - Fetch", async (getAllTrophies, achieved, trophy_id) => {
    let trophiesURL;

    if (getAllTrophies) {
        trophiesURL = `${baseURL}/trophies/?game_id=${gameID}&username=${username}&user_token=${userID}${privateAPIkey}`;
    } else if (achieved) {
        trophiesURL = `${baseURL}/trophies/?game_id=${gameID}&username=${username}&user_token=${userID}&achieved=true${privateAPIkey}`;
    } else if (trophy_id !== 0) {
        trophiesURL = `${baseURL}/trophies/?game_id=${gameID}&username=${username}&user_token=${userID}&trophy_id=${trophy_id}${privateAPIkey}`;
    }

    const md5 = getMD5Hash(trophiesURL);

    trophiesURL = `${baseURL}/trophies/?game_id=${gameID}&username=${username}&user_token=${userID}&signature=${md5}`;

    try {
        const response = await fetch(trophiesURL);
        const data = await response.json();
        // console.log(data["response"]["trophies"]);
        console.log(data);
    } catch (error) {
        console.error(error);
    }
});

// Add Achieved - Sets a trophy as achieved for a particular user.
RPM.Manager.Plugins.registerCommand(pluginName, "Trophies - Add Achieved", async (trophy_id) => {
    let trophiesURL = `${baseURL}/trophies/add-achieved/?game_id=${gameID}&username=${username}&user_token=${userID}&trophy_id=${trophy_id}${privateAPIkey}`;

    const md5 = getMD5Hash(trophiesURL);

    trophiesURL = `${baseURL}/trophies/add-achieved/?game_id=${gameID}&username=${username}&user_token=${userID}&trophy_id=${trophy_id}&signature=${md5}`;

    try {
        const response = await fetch(trophiesURL);
        const data = await response.json();
        console.log(data);
    } catch (error) {
        console.error(error);
    }
});

// Remove Achieved - Remove a previously achieved trophy for a particular user.
RPM.Manager.Plugins.registerCommand(pluginName, "Trophies - Remove Achieved", async (trophy_id) => {
    let trophiesURL = `${baseURL}/trophies/remove-achieved/?game_id=${gameID}&username=${username}&user_token=${userID}&trophy_id=${trophy_id}${privateAPIkey}`;

    const md5 = getMD5Hash(trophiesURL);

    trophiesURL = `${baseURL}/trophies/remove-achieved/?game_id=${gameID}&username=${username}&user_token=${userID}&trophy_id=${trophy_id}&signature=${md5}`;

    try {
        const response = await fetch(trophiesURL);
        const data = await response.json();
        console.log(data);
    } catch (error) {
        console.error(error);
    }
});