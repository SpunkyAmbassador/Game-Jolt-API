import { RPM } from "../path.js"

const pluginName = "Game Jolt API";

// Start code here
const fs = require('fs');
const crypto = require('crypto');

const baseURL = "https://api.gamejolt.com/api/game/v1_2";
const gameID = RPM.Manager.Plugins.getParameter(pluginName, "Game ID")
const privateAPIkey = RPM.Manager.Plugins.getParameter(pluginName, "API Key");

// Getting username and userID from .gj-credentials file autogenerated by Game Jolt in game root directory
let username;
let userID;

const cwd = process.cwd();
const credentialsFiles = fs.readdirSync(cwd).filter(file => file.endsWith('.gj-credentials'));

credentialsFiles.forEach(file => {
    const content = fs.readFileSync(file, 'utf-8', (err) => {
        if (err) {
            console.error(`Error reading file ${file}:`, err);
            return;
        }

    });
    // Split the file content by new lines
    const lines = content.split('\n');

    // Get username and userID
    username = lines[1].trim();
    userID = lines[2].trim();
});

// This function is used to create signature for the API which validates the request.
function getMD5Hash(text) {
    const hash = crypto.createHash('md5').update(text).digest('hex');
    return hash;
}

////////////////////////////////////////////////// Trophies //////////////////////////////////////////////////

// Fetch - Fetches trophies with various attributes.
RPM.Manager.Plugins.registerCommand(pluginName, "Trophies - Fetch", async (getTrophies, trophy_id, successVariableID, returnDataStoreVariableID, consoleLog) => {
    let trophiesURL = `${baseURL}/trophies/?game_id=${gameID}&username=${username}&user_token=${userID}`;

    if (trophy_id !== -1) {
        trophiesURL += `&trophy_id=${trophy_id}`;
    } else {
        if (getTrophies === -1) {
            // Do nothing
        } else if (getTrophies === 0) {
            trophiesURL += '&achieved=false';
        } else if (getTrophies === 1) {
            trophiesURL += '&achieved=true';
        } else {
            console.error(`Please provide correct value for getTrophies.\nCommand aborted.`);
        }
    }

    const md5 = getMD5Hash(trophiesURL + privateAPIkey);
    trophiesURL += `&signature=${md5}`;

    try {
        const response = await fetch(trophiesURL);
        const data = await response.json();
        if (data.response.success == "true") {
            if (successVariableID !== -1) {
                RPM.Core.Game.current.variables[successVariableID] = data.response.success;
            }
            if (returnDataStoreVariableID !== -1) {
                RPM.Core.Game.current.variables[returnDataStoreVariableID] = JSON.stringify(data.response);
            }
            if (consoleLog) {
                console.log(data.response);
            }
        } else {
            console.error(`There was an error: ${data.response.message}`);
        }
    } catch (error) {
        console.error(`There was an error: ${error}`);
    }
});

// Add Achieved - Sets a trophy as achieved for a particular user.
RPM.Manager.Plugins.registerCommand(pluginName, "Trophies - Add Achieved", async (trophy_id, successVariableID) => {
    let trophiesURL = `${baseURL}/trophies/add-achieved/?game_id=${gameID}&username=${username}&user_token=${userID}&trophy_id=${trophy_id}`;

    const md5 = getMD5Hash(trophiesURL + privateAPIkey);

    trophiesURL += `&signature=${md5}`;

    try {
        const response = await fetch(trophiesURL);
        const data = await response.json();
        if (data.response.success == "true") {
            if (successVariableID !== -1) {
                RPM.Core.Game.current.variables[successVariableID] = data.response.success;
            }
        } else {
            console.error(`There was an error: ${data.response.message}`);
        }
    } catch (error) {
        console.error(`There was an error: ${error}`);
    }
});

// Remove Achieved - Remove a previously achieved trophy for a particular user.
RPM.Manager.Plugins.registerCommand(pluginName, "Trophies - Remove Achieved", async (trophy_id, successVariableID) => {
    let trophiesURL = `${baseURL}/trophies/remove-achieved/?game_id=${gameID}&username=${username}&user_token=${userID}&trophy_id=${trophy_id}`;

    const md5 = getMD5Hash(trophiesURL + privateAPIkey);

    trophiesURL += `&signature=${md5}`;

    try {
        const response = await fetch(trophiesURL);
        const data = await response.json();
        if (data.response.success == "true") {
            if (successVariableID !== -1) {
                RPM.Core.Game.current.variables[successVariableID] = data.response.success;
            }
        } else {
            console.error(`There was an error: ${data.response.message}`);
        }
    } catch (error) {
        console.error(`There was an error: ${error}`);
    }
});

////////////////////////////////////////////////// Time //////////////////////////////////////////////////

// Time - A namespace to obtain time information from the Game Jolt server.
RPM.Manager.Plugins.registerCommand(pluginName, "Time - Time Fetch", async (
    successVariableID,
    messageVariableID,
    timestampVariableID,
    timezoneVariableID,
    yearVariableID,
    monthVariableID,
    dayVariableID,
    hourVariableID,
    minuteVariableID,
    secondVariableID) => {
    let timeURL = `${baseURL}/time/?game_id=${gameID}`;

    const md5 = getMD5Hash(timeURL + privateAPIkey);

    timeURL += `&signature=${md5}`;

    try {
        const response = await fetch(timeURL);
        const data = await response.json();
        if (data.response.success == "true") {
            if (successVariableID !== -1) {
                RPM.Core.Game.current.variables[successVariableID] = data.response.success;
            }
            if (messageVariableID !== -1) {
                RPM.Core.Game.current.variables[messageVariableID] = data.response.message;
            }
            if (timestampVariableID !== -1) {
                RPM.Core.Game.current.variables[timestampVariableID] = data.response.timestamp;
            }
            if (timezoneVariableID !== -1) {
                RPM.Core.Game.current.variables[timezoneVariableID] = data.response.timezone;
            }
            if (yearVariableID !== -1) {
                RPM.Core.Game.current.variables[yearVariableID] = data.response.year;
            }
            if (monthVariableID !== -1) {
                RPM.Core.Game.current.variables[monthVariableID] = data.response.month;
            }
            if (dayVariableID !== -1) {
                RPM.Core.Game.current.variables[dayVariableID] = data.response.day;
            }
            if (hourVariableID !== -1) {
                RPM.Core.Game.current.variables[hourVariableID] = data.response.hour;
            }
            if (minuteVariableID !== -1) {
                RPM.Core.Game.current.variables[minuteVariableID] = data.response.minute;
            }
            if (secondVariableID !== -1) {
                RPM.Core.Game.current.variables[secondVariableID] = data.response.second;
            }
        } else {
            console.error(`There was an error: ${data.response.message}`);
        }
    } catch (error) {
        console.error(error);
    }
});

////////////////////////////////////////////////// Scores //////////////////////////////////////////////////

// Add - Adds a score for a user. (Guest accounts are not supported yet)
RPM.Manager.Plugins.registerCommand(pluginName, "Scores - Add", async (score, sort, extra_data, table_id, successVariableID) => {
    let scoresURL = `${baseURL}/scores/add/?game_id=${gameID}&username=${username}&user_token=${userID}&score=${score}&sort=${sort}`;

    if (extra_data !== "" || table_id !== -1) {
        scoresURL += `&extra_data=${encodeURIComponent(extra_data)}`;
        if (table_id !== -1) {
            scoresURL += `&table_id=${table_id}`;
        }
    }

    const md5 = getMD5Hash(scoresURL + privateAPIkey);
    scoresURL += `&signature=${md5}`;

    try {
        const response = await fetch(scoresURL);
        const data = await response.json();

        if (data.response.success == "true") {
            if (successVariableID !== -1) {
                RPM.Core.Game.current.variables[successVariableID] = data.response.success;
            }
        } else {
            console.error(`There was an error: ${data.response.message}`);
        }
    } catch (error) {
        console.error(error);
    }
});

// Fetch - Returns a list of scores either for a user or globally for a game.
RPM.Manager.Plugins.registerCommand(pluginName, "Scores - Fetch", async (limit, table_id, getGlobalScores, better_than, worse_than, successVariableID, returnDataStoreVariableID, consoleLog) => {
    let scoresURL = `${baseURL}/scores/?game_id=${gameID}&limit=${limit}`;

    if (!getGlobalScores) {
        scoresURL += `&username=${username}&user_token=${userID}`;
    }

    if (table_id !== -1) {
        scoresURL += `&table_id=${table_id}`;
    }

    if (better_than !== -1 && worse_than === -1) {
        scoresURL += `&better_than=${better_than}`;
    } else if (worse_than !== -1 && better_than === -1) {
        scoresURL += `&worse_than=${worse_than}`;
    } else if (better_than === -1 && worse_than === -1) {
        // Do nothing
    } else {
        console.error("Only one of better-than and worse-than can be used at the same time.\nCommand aborted.");
        return;
    }

    const md5 = getMD5Hash(scoresURL.toString() + privateAPIkey);
    scoresURL += `&signature=${md5}`;

    try {
        const response = await fetch(scoresURL);
        const data = await response.json();

        if (!data.response.success) {
            console.error(`There was an error: ${data.response.message}`);
            return;
        }

        if (consoleLog) {
            console.log(data.response);
        }

        if (successVariableID !== -1) {
            RPM.Core.Game.current.variables[successVariableID] = data.response.success;
        }

        if (returnDataStoreVariableID !== -1) {
            RPM.Core.Game.current.variables[returnDataStoreVariableID] = JSON.stringify(data.response);
        }
    } catch (error) {
        console.error(error);
    }
});

// Get Rank - Returns the rank of a particular score on a score table.
RPM.Manager.Plugins.registerCommand(pluginName, "Scores - Get Rank", async (sort, table_id, successVariableID, rankVariableID) => {
    let scoresURL = `${baseURL}/scores/get-rank/?game_id=${gameID}&sort=${sort}`;

    if (table_id !== -1) {
        scoresURL += `&table_id=${table_id}`;
    }

    const md5 = getMD5Hash(scoresURL + privateAPIkey);
    scoresURL += `&signature=${md5}`;

    try {
        const response = await fetch(scoresURL);
        const data = await response.json();
        if (data.response.success == "true") {
            if (successVariableID !== -1) {
                RPM.Core.Game.current.variables[successVariableID] = data.response.success;
            }
            if (rankVariableID !== -1) {
                RPM.Core.Game.current.variables[rankVariableID] = data.response.rank;
            }
        } else {
            console.error(`There was an error: ${data.response.message}`);
        }
    } catch (error) {
        console.error(error);
    }
});

// Tables - Returns a list of high score tables for a game.
RPM.Manager.Plugins.registerCommand(pluginName, "Scores - Tables", async (successVariableID, returnDataStoreVariableID, consoleLog) => {
    let scoresURL = `${baseURL}/scores/tables/?game_id=${gameID}`;

    const md5 = getMD5Hash(scoresURL + privateAPIkey);
    scoresURL += `&signature=${md5}`;

    try {
        const response = await fetch(scoresURL);
        const data = await response.json();
        if (data.response.success == "true") {
            if (successVariableID !== -1) {
                RPM.Core.Game.current.variables[successVariableID] = data.response.success;
            }
            if (returnDataStoreVariableID !== -1) {
                RPM.Core.Game.current.variables[returnDataStoreVariableID] = JSON.stringify(data.response);
            }
            if (consoleLog) {
                console.log(data.response);
            }
        } else {
            console.error(`There was an error: ${data.response.message}`);
        }
        console.log(data.response);
    } catch (error) {
        console.error(error);
    }
});